package client;

import java.util.ArrayList;
import java.util.List;
import java.io.*;

import static org.junit.Assert.*;

import org.junit.Test;

import testing.TestUtils;

/**
 * Tests our WhiteboardModel class
 * @category no_didit
 */
public class WhiteboardModelTest {
    /*
     * TESTING STRATEGY:
     * 
     * We will test the client side from two ends:
     * 
     * - Check that the model can SEND messages to the server, and that the
     * correct messages are generated.
     * 
     * - Check that the model will RECEIVE message correctly, i.e. that the
     * Front End executes coherent methods when a message is generated by the
     * server.
     */
	
    @Test
    public void clientCorretlySendsDrawLineMessages() throws IOException {
        int portNumber = 4444;
        TestUtils test = new TestUtils();
        List<String> clientSentMessages = new ArrayList<String>();

        test.startServer(portNumber);

        // Generate a dummy front end we can associate with the model
        WhiteboardModel modelToTest = new WhiteboardModel(
                test.new dummyFrontEnd());
        modelToTest.connectToServer("localhost", portNumber);

        // Send a message to the server
        modelToTest.drawLineOnServer(100, 100, 200, 200, 5, 0, 0, 0);
        clientSentMessages.add("line 100 100 200 200 5 0 0 0");

        test.sleep();
        assertEquals(clientSentMessages, test.serverReceivedMessages);
    }

    @Test
    public void clientCorretlySendsWhiteboardMessages() throws IOException {
        int portNumber = 4445;
        TestUtils test = new TestUtils();
        List<String> clientSentMessages = new ArrayList<String>();

        test.startServer(portNumber);

        // Generate a dummy front end we can associate with the model
        WhiteboardModel modelToTest = new WhiteboardModel(
                test.new dummyFrontEnd());
        modelToTest.connectToServer("localhost", portNumber);

        // Send a message to the server
        modelToTest.connectToWhiteBoard("whiteboard", "username", true);
        clientSentMessages.add("whiteboard whiteboard username username");

        test.sleep();
        assertEquals(clientSentMessages, test.serverReceivedMessages);
    }

    @Test
    public void clientCorretlySendsDisconnectMessage() throws IOException {
        int portNumber = 4446;
        TestUtils test = new TestUtils();
        List<String> clientSentMessages = new ArrayList<String>();

        test.startServer(portNumber);

        // Generate a dummy front end we can associate with the model
        WhiteboardModel modelToTest = new WhiteboardModel(
                test.new dummyFrontEnd());
        modelToTest.connectToServer("localhost", portNumber);

        // Send a message to the server
        modelToTest.disconnectFromServer();
        clientSentMessages.add("disconnect");

        test.sleep();
        assertEquals(clientSentMessages, test.serverReceivedMessages);
    }

    @Test
    public void clientCorretlyReceivesMessages() throws IOException {
        int portNumber = 4447;
        final TestUtils utils = new TestUtils();
        List<String> serverSentMessages = new ArrayList<String>();

        utils.startServer(portNumber);

        // Generate a dummy front end we can associate with the model
        WhiteboardModel modelToTest = new WhiteboardModel(
                utils.new dummyFrontEnd());
        modelToTest.connectToServer("localhost", portNumber);

        /*
         * We need first to send a "whiteboard" message to be able to send
         * further messages to the client. However the client will have a while
         * loop running waiting for the server to tell him whether the username
         * is unique or not. So wee need to thread off and wait for a little,
         * and then send a message to the client(this way letting him know that
         * the username is unique) that will make the client exit the
         * in.readline() while loop.
         */
        new Thread(new Runnable() {
            public void run() {
                // Wait for the initial testing thread to connectToWhiteBoard().
                utils.sleep();
                // Send a message to the client
                utils.serverSendToClient("line 0 0 200 200 5 0 0 0 username");
            }
        }).start();
        modelToTest.connectToWhiteBoard("whiteboard", "user", false);

        utils.sleep(); // Make sure the serverlistener has been created by now

        serverSentMessages.add("line 0 0 200 200 5 0 0 0 username");
        utils.sleep();
        serverSentMessages.add("users user1 user2");
        utils.serverSendToClient("users user1 user2");
        utils.sleep();
        serverSentMessages.add("newUser randomNewUser");
        utils.serverSendToClient("newUser randomNewUser");
        utils.sleep();

        assertEquals(serverSentMessages, utils.guiReceivedMessages);
    }
}
